(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{372:function(t,r,o){"use strict";o.r(r);var s=o(44),e=Object(s.a)({},(function(){var t=this,r=t.$createElement,o=t._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"docker-随笔"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker-随笔"}},[t._v("#")]),t._v(" Docker 随笔")]),t._v(" "),o("h2",{attrs:{id:"容器化及其优势"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#容器化及其优势"}},[t._v("#")]),t._v(" 容器化及其优势")]),t._v(" "),o("p",[t._v("容器虚拟化（操作系统级虚拟化）能够使多个用户空间在同一个宿主机跑。")]),t._v(" "),o("p",[t._v("这样我们不但可以充分利用资源，而且由于每个用户空间是隔离的，那么当有一个用户出现卡死的状况不会导致在同一个宿主机上运行的其他用户空间出现问题。同时，权限隔离监牢创建了一个隔离的目录环境来运行进程，那么如果监牢中存在入侵者，入侵者也会犹豫权限不足被困在容器创建的目录下，从而保护宿主机不被破坏。")]),t._v(" "),o("ul",[o("li",[o("p",[t._v("模块化")]),t._v(" "),o("p",[t._v("支持了在不停下整个应用的情况下，对某些模块进行更新和修复。")])]),t._v(" "),o("li",[o("p",[t._v("层和版本控制")]),t._v(" "),o("p",[t._v("Docker 的镜像文件都是由多个层组成的，这些组合在一起就会构成一个镜像，当某个层发生变化那么就会有新的镜像产生。")])]),t._v(" "),o("li",[o("p",[t._v("回滚")]),t._v(" "),o("p",[t._v("如果你不喜欢迭代后的新镜像，那么可以回滚镜像。该功能支持了CI/CD")])]),t._v(" "),o("li",[o("p",[t._v("快速部署")]),t._v(" "),o("p",[t._v("基于镜像的容器可以把部署时间缩短到几秒")])])]),t._v(" "),o("h2",{attrs:{id:"docker"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),o("blockquote",[o("p",[t._v("一个可以把你的代码自动部署到容器里的牛逼引擎")])]),t._v(" "),o("h3",{attrs:{id:"docker容器如何做到资源的隔离"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker容器如何做到资源的隔离"}},[t._v("#")]),t._v(" Docker容器如何做到资源的隔离？")]),t._v(" "),o("p",[t._v("容器的目的所在就是在一个物理机上运行多种进程，多个应用。Docker 用了Linux 中的Cgroups 和namespaces 分割进程。")]),t._v(" "),o("h3",{attrs:{id:"docker-镜像"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像"}},[t._v("#")]),t._v(" docker 镜像")]),t._v(" "),o("p",[t._v("docker 镜像是由文件叠加而成的，最底层是一个引导文件 bootfs，第二层是rootfs，rootfs可以是一种或多种os。在传动linux中，root文件系统已开始以只读的方式加载，引导结束后变成读写状态，而docker只是已读状态。")]),t._v(" "),o("p",[t._v("Docker 会使用联合加载技术同时加载多个文件，联合加载会把各层文件系统叠加到一起，外面看就是一个文件系统。")]),t._v(" "),o("p",[o("img",{attrs:{src:"https://gaoyan1999.oss-cn-beijing.aliyuncs.com/md/2021-05-29-174817.png",alt:"截屏2021-05-30 上午1.32.12"}})]),t._v(" "),o("p",[t._v("由图可以看出，镜像层不支持写操作，而容器层可写。每当我们创建一个容器时，docker 先构建一个镜像栈，在栈顶在构建一个读写层，那么在加上一些配置后一个可用容器就诞生了。")]),t._v(" "),o("blockquote",[o("p",[t._v("写时复制")])]),t._v(" "),o("p",[t._v("docker 另一个nb之处是写时复制，如果想要改动一个文件，这个文件会从只读层"),o("strong",[t._v("复制")]),t._v("到读写层，那么这个文件的改动前版本还是存在的，读写层的只是它的副本而已。")]),t._v(" "),o("div",{staticClass:"custom-block warning"},[o("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),o("p",[t._v("To be continue……")])])])}),[],!1,null,null,null);r.default=e.exports}}]);
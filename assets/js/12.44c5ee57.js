(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{367:function(t,a,s){"use strict";s.r(a);var v=s(44),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"ngnix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ngnix"}},[t._v("#")]),t._v(" Ngnix")]),t._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("blockquote",[s("p",[t._v("Nginx  ：一个高性能的HTTP和反向代理的web服务器")])]),t._v(" "),s("p",[t._v("占用内存小，并发能力高，支持热部署")]),t._v(" "),s("blockquote",[s("p",[t._v("基本概念")])]),t._v(" "),s("ul",[s("li",[t._v("反向代理")]),t._v(" "),s("li",[t._v("负载均衡")]),t._v(" "),s("li",[t._v("动静分离")])]),t._v(" "),s("h3",{attrs:{id:"反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),s("p",[t._v("正向代理：用户想要访问某个网站，不直接访问，而是通过在客户端配置一个代理服务器来访问。")]),t._v(" "),s("p",[t._v("反向代理：客户端不需要配置代理服务器，而是想请求发送给代理服务器，代理服务器通过请求转发到真实的服务器，由代理服务器返回响应。其暴露的是代理服务器，而不是真正的目标服务器。")]),t._v(" "),s("h3",{attrs:{id:"负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),s("p",[t._v("随着并发量的增大，原来的请求响应架构已经无法满足日益增长的需求。我们可以增加服务器的数量，将请求分发到不同的服务器上。")]),t._v(" "),s("p",[t._v("![](/Users/gaoyan/notes/截屏2020-06-25 下午8.58.49.png)")]),t._v(" "),s("h3",{attrs:{id:"动静分离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[t._v("#")]),t._v(" 动静分离")]),t._v(" "),s("p",[t._v("为了加快网站的解析速度，把静态页面和动态页面分开进行部署。Tomcat只部署servlet、jsp等动态资源，而又另外一个服务器专门加载静态页面。")]),t._v(" "),s("h2",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("nginx-v： 查看版本")])]),t._v(" "),s("li",[s("p",[t._v("nginx -s reload:重新加载")])]),t._v(" "),s("li",[s("p",[t._v("Nginx -s stop :关闭")])]),t._v(" "),s("li",[s("p",[t._v("service nginx start:启动")])])]),t._v(" "),s("h2",{attrs:{id:"配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),s("p",[t._v("nginx配置文件位置 "),s("code",[t._v("/etc/nginx/nginx.conf")])]),t._v(" "),s("p",[t._v("主要分为三个部分 全局块、events、http")]),t._v(" "),s("blockquote",[s("p",[t._v("全局块")])]),t._v(" "),s("p",[t._v("设置影响nginx服务器整体运行的配置命令，用户组，worker process、进程PID 存放路径、日志存放路径和其他配置文件的引入。")]),t._v(" "),s("blockquote",[s("p",[t._v("events")])]),t._v(" "),s("p",[t._v("nginx服务器和用户网络的链接")]),t._v(" "),s("p",[t._v("worker_connections 1024 ;支持最大连接数")]),t._v(" "),s("blockquote",[s("p",[t._v("Http")])]),t._v(" "),s("p",[t._v("http全局配置的指令。其中包含全局http全局块和server块")]),t._v(" "),s("h2",{attrs:{id:"配置反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置反向代理"}},[t._v("#")]),t._v(" 配置反向代理")]),t._v(" "),s("blockquote",[s("p",[t._v("使用nginx跳转到不同的其他url")])]),t._v(" "),s("p",[t._v("在linux下配置tomcat 容器。使用nginx反向代理访问Tomcat")]),t._v(" "),s("ul",[s("li",[t._v("在nginx的配置文件下配置需要跳转的url地址")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Load configuration files for the default server block.")]),t._v("\n        include /etc/nginx/default.d/*.conf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass http://127.0.0.1:8080"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])]),s("ul",[s("li",[s("p",[t._v("重新加载nginx")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v(" nginx -s reload\n")])])])]),t._v(" "),s("li",[s("p",[t._v("访问")]),t._v(" "),s("p",[t._v("在本地直接访问服务器上的的80端口时，nginx会自动的去请求本地（指服务器的本地）所属Tomcat的8080端口，将相应结果返回给我们（请求者）。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("根据访问路径的不同跳转到不同端口的服务")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("准备两个Tomcat容器，分别有不同的html页面")])]),t._v(" "),s("li",[s("p",[t._v("在配置文件中加入反向代理")]),t._v(" "),s("p",[s("img",{attrs:{src:"/Users/gaoyan/notes/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("开放对应的端口号")])])]),t._v(" "),s("h2",{attrs:{id:"负载均衡-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡-2"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("准备多个Tomcat")])]),t._v(" "),s("li",[s("p",[t._v("在nginx.conf下配置负载均衡规则")]),t._v(" "),s("p",[t._v("![](/Users/gaoyan/notes/截屏2020-06-26 下午2.24.40.png)")])])]),t._v(" "),s("h2",{attrs:{id:"动静分离-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动静分离-2"}},[t._v("#")]),t._v(" 动静分离")]),t._v(" "),s("p",[t._v("把动态请求和静态请求分开，nginx加载静态页面，Tomcat加载动态页面")])])}),[],!1,null,null,null);a.default=_.exports}}]);